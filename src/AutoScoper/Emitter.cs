using System.Collections.Generic;
using System.Linq;
using System.Text;
using AutoScoper.Models;
using Microsoft.CodeAnalysis;

namespace AutoScoper;

internal class Emitter(SourceProductionContext context, IReadOnlyList<AutoScopeClass> classes)
{
    internal void Emit()
    {
        foreach (var @class in classes)
        {
            Emit(@class);
        }
    }

    private void Emit(AutoScopeClass autoScopeClass)
    {
        var sb = new StringBuilder();

        var interfacesString = string.Join(
            ", ",
            autoScopeClass.Interfaces.Select(x => x.InterfaceSymbol.ToDisplayString()));

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine($"namespace {autoScopeClass.Namespace};");
        sb.AppendLine($"public partial class {autoScopeClass.ClassName}: {interfacesString}");
        sb.AppendLine("{");

        foreach (var autoScopeInterface in autoScopeClass.Interfaces)
        {
            var interfaceName = autoScopeInterface.InterfaceSymbol.ToDisplayString();
            foreach (var autoScopeMethod in autoScopeInterface.Methods)
            {
                var partialString = autoScopeMethod.IsPartial ? "partial " : string.Empty;
                var returnString = autoScopeMethod.MethodSymbol.ReturnType.ToDisplayString();
                var methodName = autoScopeMethod.MethodSymbol.Name;
                var parametersString = string.Join(
                    ", ",
                    autoScopeMethod.MethodSymbol.Parameters
                        .Select(x => $"{x.Type.ToDisplayString()} {x.Name}"));
                var argumentsString = string.Join(
                    ", ",
                    autoScopeMethod.MethodSymbol.Parameters.Select(x => x.Name));
                var genericTypeParametersString = autoScopeMethod.MethodSymbol.TypeParameters.IsEmpty
                    ? string.Empty
                    : "<" + string.Join(
                        ", ",
                        autoScopeMethod.MethodSymbol.TypeParameters.Select(x => x.Name)) + ">";

                sb.AppendLine(
                    $$"""
                        public {{partialString}}{{returnString}} {{methodName}}{{genericTypeParametersString}}({{parametersString}})
                        {
                            using var scope = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateScope(AutoScoper.AutoScopeProvider.ServiceProvider);
                            var service = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{{interfaceName}}>(scope.ServiceProvider);
                            return service.{{methodName}}({{argumentsString}});
                        }
                     """);
            }
        }

        sb.AppendLine("}");

        var generatedFileName = $"{autoScopeClass.ClassSymbol.Name}.g.cs";
        context.AddSource(generatedFileName, sb.ToString());
    }
}
